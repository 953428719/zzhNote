1、Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符。 print(ord('A')) >> 65   ||    print(chr(65)) >> A

2、由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位。Python对bytes类型的数据用带b前缀的单引号或双引号表示： x = b'ABC'；以Unicode表示的str通过encode()方法可以编码为指定的bytes。

3、如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()。
>>> b'ABC'.decode('ascii')  
'ABC'
>>> b'\xe4\xb8\xad'.decode('utf-8')
'中'

4、序列化与反序列化。序列化可以分为本地和网络：对于本地序列化，往往就是将内存中的对象持久化到本地的硬盘，此时序列化做的工作就是将对象和一些对象的相关信息序列化成字符串，然后字符串以某种格式(比如utf-8)进行编码变成bytes类型，存储到硬盘。反序列化就是先将硬盘中的bytes类型中的数据读到内存经过解码变成字符串，然后对字符串进行反序列化解析生成对象。网络中传输的数据一般为Json和Xml，此时序列化是指将对象变成Json类型的字符串，传输时同样需要将序列化后的字符串变成Bytes类型，反序列化是先将拿到的Bytes类型的数据变成Json类型的字符串(这一步框架往往会帮我们做)，然后真正的反序列化是指将Json类型的字符串变成Json类型的对象。(这里注意区分Json类型的字符串和Json类型的对象)

5、UTF-8是一种变长字节编码方式。对于某一个字符的UTF-8编码，如果只有一个字节则其最高二进制位为0；如果是多字节，其第一个字节从最高位开始，连续的二进制位值为1的个数决定了其编码的字节数，除了首个字节，其余各字节均以10开头。UTF-8最多可用到6个字节。 
   1字节 0xxxxxxx 
   2字节 110xxxxx 10xxxxxx 
   3字节 1110xxxx 10xxxxxx 10xxxxxx 
   4字节 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 
   5字节 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 
   6字节 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 
   因此UTF-8中可以用来表示字符编码的实际位数最多有31位。
   
对于上面的问题，代码中给出的两个字节是 
十六进制：C0 B1 
二进制：11000000 10110001 
对比两个字节编码的表示方式： 
        110xxxxx 10xxxxxx 
提取出对应的UNICODE编码： 
           00000   110001 
可以看出此编码并非“标准”的UTF-8编码，因为其第一个字节的“有效编码”全为0，去除高位0后的编码仅有6位。由前面所述，此字符仅用一个字节的UTF-8编码表示就够了。 

中文的中字，用ord('中')获取字符的整数表示为：20013，二进制表示为:100111000101101，十六进制表示为:\u4e2d (\u代表unicode编码，一般后面跟着4个十六进制数)，数一下二进制的位数一共是15位，去对上面utf8编码表，3字节的可编码的实际位数是16位，已经满足要求，所以我们用3字节的长度，来把中字编码为utf8的形式。从低位开始，套进编码格式中：
          
1110xxxx 10xxxxxx 10xxxxxx
    0100   111000   101101
最后得到：
11100100 10111000 10101101
化为十六进制：
e4 b8 ad
所以'中'字符从Unicode转化为utf-8的字节表示为：b'\xe4\xb8\xad'

6、一般规律：1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。

7、


